# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import data_file

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = '6025298232:AAGoesIM_VvWi5pjHXPEZC_-11CLpjZN9xA'
bot = telebot.TeleBot(TOKEN)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
def generate_keyboard(buttons, callback_prefix=""):
    keyboard = InlineKeyboardMarkup()
    for button_text in buttons:
        callback_data = callback_prefix + button_text
        keyboard.add(InlineKeyboardButton(button_text, callback_data=callback_data))
    return keyboard


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def generate_main_keyboard():
    categories = data_file.main_dict.keys()
    keyboard = generate_keyboard(categories, callback_prefix="1")
    keyboard.add(InlineKeyboardButton("–¢–∞–±–ª–∏—Ü–∞ —Å–æ –≤—Å–µ–º–∏ –ü—Ä–æ–º–æ–∫–æ–¥–∞–º–∏!",
                                      url="https://docs.google.com/spreadsheets/d/1FhYGE5IODqbtXSfQGBs0BGUaUJYAWBGAC2SRWqYzf6M"))
    return keyboard


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def generate_secondary_keyboard(category):
    markets = data_file.main_dict[category]
    keyboard = generate_keyboard(markets, callback_prefix="2")
    keyboard.add(InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="bm"))
    return keyboard


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã "–Ω–∞–∑–∞–¥"
def generate_back_keyboard(market):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="bm"))
    for category, markets in data_file.main_dict.items():
        if market in markets:
            keyboard.add(InlineKeyboardButton(category, callback_data="1" + category))
    return keyboard


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text_message(message):
    if message.text == '/start':
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É ‚¨á",
                         reply_markup=generate_main_keyboard())
    elif message.text in ['/stat_cat', '/stat_markets']:
        stat_dict = data_file.stat_cat_dict if message.text == '/stat_cat' else data_file.stat_markets_dict
        bot.send_message(message.chat.id, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π {message.text[5:]}:")
        for k, v in stat_dict.items():
            bot.send_message(message.chat.id, f"{k}: {len(set(v))}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    bot.answer_callback_query(callback_query_id=call.id)
    data = call.data[1:]
    flag = call.data[0]

    if flag == "1":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–∏—Ä–∞–π—Ç–µ ü•∞",
                              reply_markup=generate_secondary_keyboard(data))
        data_file.stat_cat_dict[data].append(call.from_user.id)
    elif flag == "2":
        bot.send_message(call.message.chat.id,
                         "–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–∫—Ü–∏–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ: –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞")
        data_file.stat_markets_dict[data].append(call.from_user.id)
        for text in data_file.text_dict[data]:
            bot.send_message(call.message.chat.id, text)
        bot.send_message(call.message.chat.id, "–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è –∑–∞ —Å–∫–∏–¥–∫–∞–º–∏ –¥–∞–ª—å—à–µ?",
                         reply_markup=generate_back_keyboard(data))
    elif flag == "b" and data == "m":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É ‚¨á",
                              reply_markup=generate_main_keyboard())


print("Ready")
bot.infinity_polling()
